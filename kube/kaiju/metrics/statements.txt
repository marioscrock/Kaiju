#listener:simple,name:COUNT METRICS=select count(*) from Metric#time(1min) output last every 1 min
listener:none,name:ContainerCPUUtilisation=create schema ContainerCPUUtilisation(container String, pod String, ns String, usage double)
listener:none,name:Insert Into ContainerCPUUtilisation=insert into ContainerCPUUtilisation select m1.tags('container_name') as container, m1.tags('pod_name') as pod, m1.tags('namespace') as ns, avg((m2.fields('counter') - m1.fields('counter'))/((m2.timestamp - m1.timestamp)/1000)) as usage from pattern [every m1=Metric(name='container_cpu_usage_seconds_total') -> m2=Metric(m2.name=m1.name and m2.tags=m1.tags)]#time(1min) group by m1.tags('container_name'), m1.tags('pod_name'), m1.tags('namespace') output last every 1min
listener:none,name:HighCPUUsage=create schema HighCPUUsage(container String, pod String, ns String, usage double, cpuLimit float)
listener:none,name:Insert Into HighCPUUsage=insert into Event select java.time.Instant.now().toEpochMilli() as timestamp, new {container=container, highUsage=usage} as payload, new {cpuLimit=fields('gauge'), pod=pod, namespace=ns} as context from ContainerCPUUtilisation#lastevent u, Metric(name='kube_pod_container_resource_limits_cpu_cores')#lastevent m where m.tags('container')=u.container and m.tags('pod')=u.pod and m.tags('namespace')=u.ns and usage > fields('gauge')